{"version":3,"sources":["context/reducers/weather-reducer.js","components/header/header.js","context/reducers/index.js","context/store/store.js","context/actions/actions-weather.js","components/currentCity/currentCity.js","components/weatherCard/weatherCard.js","components/cities/cities.js","App.js","serviceWorker.js","index.js"],"names":["versionSlice","createSlice","name","initialState","loading","error","units","lang","currentWeather","cities","reducers","updateLoading","state","action","payload","updateError","updateUnits","updateLang","updateLocalWeather","localWeather","localForecast","updateCities","actions","reducer","Header","dispatch","useDispatch","useSelector","weatherReducer","className","src","alt","type","checked","onChange","e","target","value","map","key","toUpperCase","rootReducer","store","configureStore","API","getCityWeather","search","index","dispath","getState","a","getWeather","cityWeather","newCities","push","params","axios","get","then","currentForecast","listDays","data","list","days","i","length","moment","dt_txt","format","day","undefined","max","main","temp_max","min","temp_min","catch","err","weather","CurrentCity","Object","keys","useEffect","Loading","size","icon","faUndo","Weather","height","iconcode","temp","description","faArrowUp","faArrowDown","WeatherCard","props","changeCity","deleteCard","cityRef","useRef","frontRef","backRef","moreInfo","current","classList","toggle","checkWeather","ref","onClick","onKeyPress","placeholder","Cities","useState","addCityRef","promises","city","Promise","resolve","reject","newWeather","all","newWeathers","includes","newCity","splice","deleteCity","color","faPlusCircle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c10f3527.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n// import { AppConfiguration } from \"read-appsettings-json\";\r\n\r\nconst versionSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: {\r\n    loading: false,\r\n    error: false,\r\n    units: 'metric',\r\n    lang: 'es',\r\n    currentWeather: {},\r\n    cities: [],\r\n    // portalVersion: AppConfiguration.Setting().versionnumber\r\n  },\r\n  reducers: {\r\n    updateLoading(state, action) {\r\n      state.loading = action.payload;\r\n    },\r\n    updateError(state, action) {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    updateUnits(state, action) {\r\n      state.units = action.payload;\r\n    },\r\n    updateLang(state, action) {\r\n      state.lang = action.payload;\r\n    },\r\n    updateLocalWeather(state, action) {\r\n      state.currentWeather = {\r\n        localWeather: action.payload.localWeather,\r\n        localForecast: action.payload.localForecast,\r\n      };\r\n      state.loading = false;\r\n    },\r\n    updateCities(state, action) {\r\n      state.cities = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nconst { actions, reducer } = versionSlice;\r\n\r\nexport const {\r\n  updateLoading,\r\n  updateError,\r\n  updateLang,\r\n  updateUnits,\r\n  updateLocalWeather,\r\n  updateCities,\r\n} = actions;\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  updateUnits,\r\n  updateLang,\r\n} from '../../context/reducers/weather-reducer';\r\nimport './header.scss';\r\n\r\nexport default function Header() {\r\n  const dispatch = useDispatch();\r\n  const lang = useSelector((state) => state.weatherReducer.lang);\r\n  const units = useSelector((state) => state.weatherReducer.units);\r\n\r\n  const languages = ['es', 'en', 'fr'];\r\n\r\n  const changeUnits = () => {\r\n    const unit = units === 'metric' ? 'imperial' : 'metric';\r\n    dispatch(updateUnits(unit));\r\n  };\r\n\r\n  const changeLang = (e) => {\r\n    const lang = e.target.value;\r\n    dispatch(updateLang(lang));\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <div className='header-logo'>\r\n        <img\r\n          src='https://openweathermap.org/themes/openweathermap/assets/img/logo_white_cropped.png'\r\n          alt='Logo'\r\n        />\r\n      </div>\r\n      <div className='header-options'>\r\n        <div className='temp-switch'>\r\n          <h3>F º</h3>\r\n          <label>\r\n            <input\r\n              type='checkbox'\r\n              checked={units === 'metric'}\r\n              onChange={changeUnits}\r\n            />\r\n            <span></span>\r\n            <i className='indicator'></i>\r\n          </label>\r\n          <h3>C º</h3>\r\n        </div>\r\n        <div className='lang-switch'>\r\n          <img\r\n            src={`https://www.countryflags.io/${\r\n              lang === 'es' ? 'ar' : lang === 'en' ? 'gb' : lang\r\n            }/flat/32.png`}\r\n            alt={`${lang} flag`}\r\n          />\r\n          <select name='language' onChange={changeLang}>\r\n            {languages.map((lang) => {\r\n              return (\r\n                <option key={lang} value={lang}>\r\n                  {lang.toUpperCase()}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import weatherReducer from './weather-reducer'\r\n\r\nexport const rootReducer = { weatherReducer }","import { configureStore } from '@reduxjs/toolkit';\r\nimport { rootReducer } from '../reducers';\r\n// import { createBrowserHistory } from \"history\";\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\n//Replace the links const for appSettings when its deployment is properly tested\r\n\r\nexport const API = 'http://localhost:4000/v1';\r\n// export const history = createBrowserHistory();\r\nexport default store;\r\n","import { API } from '../store/store';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport {\r\n  updateLoading,\r\n  updateError,\r\n  updateLocalWeather,\r\n  updateCities,\r\n} from '../reducers/weather-reducer';\r\n\r\nexport const getLocalWeather = () => (dispath, getState) => {\r\n  const { units, lang } = getState().weatherReducer;\r\n  dispath(updateLoading(true));\r\n  axios\r\n    .get(`${API}/location/`, {\r\n      params: {\r\n        units,\r\n        lang,\r\n      },\r\n    })\r\n    .then((currentWeather) => {\r\n      axios\r\n        .get(`${API}/forecast/`, {\r\n          params: {\r\n            units,\r\n            lang,\r\n          },\r\n        })\r\n        .then((currentForecast) => {\r\n          let listDays = currentForecast.data.list;\r\n          let days = {};\r\n          for (let i = 0; i < listDays.length; i++) {\r\n            if (\r\n              moment(listDays[i].dt_txt).format('D') !== moment().format('D')\r\n            ) {\r\n              let day = moment(listDays[i].dt_txt).format('M[/]D');\r\n              if (days[day] === undefined) days[day] = {};\r\n              if (days[day].max === undefined) days[day].max = 0;\r\n              days[day].max =\r\n                listDays[i].main.temp_max >= days[day].max\r\n                  ? listDays[i].main.temp_max\r\n                  : days[day].max;\r\n              if (days[day].min === undefined) days[day].min = 1000;\r\n              days[day].min =\r\n                listDays[i].main.temp_min <= days[day].min\r\n                  ? listDays[i].main.temp_min\r\n                  : days[day].min;\r\n            }\r\n          }\r\n          dispath(\r\n            updateLocalWeather({\r\n              localWeather: currentWeather.data,\r\n              localForecast: days,\r\n            })\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          dispath(updateError(true));\r\n        });\r\n    })\r\n    .catch((err) => {\r\n      dispath(updateError(true));\r\n    });\r\n};\r\n\r\nexport const getCityWeather = (search, index) => async (dispath, getState) => {\r\n  const { units, lang, cities } = getState().weatherReducer;\r\n  dispath(updateLoading(true));\r\n  let cityWeather = await getWeather(search, { units, lang });\r\n  if (cityWeather === 'error') {\r\n    dispath(updateError(true));\r\n  } else {\r\n    const newCities = [...cities];\r\n    if (typeof index === 'number') {\r\n      newCities[index] = cityWeather;\r\n    } else {\r\n      newCities.push(cityWeather);\r\n    }\r\n    dispath(updateCities(newCities));\r\n  }\r\n};\r\n\r\nexport const updateCitiesWeather = () => async (dispath, getState) => {\r\n  const { units, lang, cities } = getState().weatherReducer;\r\n  let promises = [...cities].map(\r\n    (city) =>\r\n      new Promise(async (resolve, reject) => {\r\n        const search = city.currentWeather.name;\r\n        let newWeather = await getWeather(search, { units, lang });\r\n        if (newWeather === 'error') reject('error');\r\n        resolve(newWeather);\r\n      })\r\n  );\r\n  Promise.all(promises).then((newWeathers) => {\r\n    if (newWeathers.includes('error')) dispath(updateError(true));\r\n    dispath(updateCities(newWeathers));\r\n  });\r\n};\r\n\r\nconst getWeather = async (search, params) => {\r\n  let weather = await axios\r\n    .get(`${API}/current/${search}`, {\r\n      params,\r\n    })\r\n    .then(async (currentWeather) => {\r\n      return await axios\r\n        .get(`${API}/forecast/${search}`, {\r\n          params,\r\n        })\r\n        .then((currentForecast) => {\r\n          let listDays = currentForecast.data.list;\r\n          let days = {};\r\n          for (let i = 0; i < listDays.length; i++) {\r\n            if (\r\n              moment(listDays[i].dt_txt).format('D') !== moment().format('D')\r\n            ) {\r\n              let day = moment(listDays[i].dt_txt).format('M[/]D');\r\n              if (days[day] === undefined) days[day] = {};\r\n              if (days[day].max === undefined) days[day].max = 0;\r\n              days[day].max =\r\n                listDays[i].main.temp_max >= days[day].max\r\n                  ? listDays[i].main.temp_max\r\n                  : days[day].max;\r\n              if (days[day].min === undefined) days[day].min = 1000;\r\n              days[day].min =\r\n                listDays[i].main.temp_min <= days[day].min\r\n                  ? listDays[i].main.temp_min\r\n                  : days[day].min;\r\n            }\r\n          }\r\n          return {\r\n            currentWeather: currentWeather.data,\r\n            currentForecast: days,\r\n          };\r\n        })\r\n        .catch((err) => {\r\n          return 'error';\r\n        });\r\n    })\r\n    .catch((err) => {\r\n      return 'error';\r\n    });\r\n  return weather;\r\n};\r\n\r\nexport const deleteCity = (index) => (dispath, getState) => {\r\n  const cities = [...getState().weatherReducer.cities];\r\n  cities.splice(index, 1);\r\n  dispath(updateCities(cities));\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLocalWeather } from '../../context/actions/actions-weather';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faUndo,\r\n  faArrowUp,\r\n  faArrowDown,\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport './currentCity.scss';\r\n\r\nexport default function CurrentCity() {\r\n  const dispatch = useDispatch();\r\n  const currentWeather = useSelector(\r\n    (state) => state.weatherReducer.currentWeather\r\n  );\r\n  const units = useSelector((state) => state.weatherReducer.units);\r\n  const lang = useSelector((state) => state.weatherReducer.lang);\r\n\r\n  const { localWeather, localForecast } = currentWeather;\r\n  const days = localForecast && Object.keys(localForecast);\r\n\r\n  useEffect(() => {\r\n    dispatch(getLocalWeather());\r\n  }, [dispatch, units, lang]);\r\n\r\n  const Loading = () => (\r\n    <div className='loading'>\r\n      <FontAwesomeIcon size='6x' icon={faUndo} />\r\n    </div>\r\n  );\r\n\r\n  const Weather = () => (\r\n    <div className='current-container'>\r\n      <h1>{localWeather.name}</h1>\r\n      <div className='current-body'>\r\n        <div className='today'>\r\n          <div className='current-day'>\r\n            <span>\r\n              <img\r\n                height='150px'\r\n                src={`http://openweathermap.org/img/wn/${iconcode}@4x.png`}\r\n                alt='weather icon'\r\n              />\r\n            </span>\r\n            <div className='current-description'>\r\n              <h2>\r\n                {localWeather.main.temp} {units === 'metric' ? 'C º' : 'F º'}\r\n              </h2>\r\n              {localWeather.weather[0].description}\r\n            </div>\r\n          </div>\r\n          <div className='current-more-info'>\r\n            <div>\r\n              <FontAwesomeIcon icon={faArrowUp} />\r\n              {localWeather.main.temp_max} {units === 'metric' ? 'C º' : 'F º'}\r\n            </div>\r\n            <div>\r\n              <FontAwesomeIcon icon={faArrowDown} />\r\n              {localWeather.main.temp_min} {units === 'metric' ? 'C º' : 'F º'}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='forecast'>\r\n          <ul>\r\n            {days.map((day, i) => {\r\n              return (\r\n                <li key={i}>\r\n                  <div className='day'>{day}</div>\r\n                  <div className='temps'>\r\n                    <FontAwesomeIcon icon={faArrowUp} />\r\n                    {localForecast[day].max}{' '}\r\n                    {units === 'metric' ? 'C º' : 'F º'}\r\n                    <FontAwesomeIcon icon={faArrowDown} />\r\n                    {localForecast[day].min}{' '}\r\n                    {units === 'metric' ? 'C º' : 'F º'}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const iconcode = localWeather && localWeather.weather[0].icon;\r\n  return localWeather ? <Weather /> : <Loading />;\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\nimport './weatherCard.scss';\r\n\r\nexport default function WeatherCard(props) {\r\n  const { index, weather, changeCity, deleteCard } = props;\r\n  const { currentWeather, currentForecast } = weather;\r\n  const days = Object.keys(currentForecast);\r\n  const units = useSelector((state) => state.weatherReducer.units);\r\n\r\n  const cityRef = useRef(null);\r\n  const frontRef = useRef(null);\r\n  const backRef = useRef(null);\r\n\r\n  const moreInfo = () => {\r\n    frontRef.current.classList.toggle('active');\r\n    backRef.current.classList.toggle('active');\r\n  };\r\n\r\n  const checkWeather = async () => {\r\n    return changeCity(cityRef.current.value, index);\r\n  };\r\n\r\n  const enterWeather = (e) => {\r\n    if (e.key === 'Enter') checkWeather();\r\n  };\r\n\r\n  const closeCard = () => {\r\n    deleteCard(index);\r\n  };\r\n\r\n  const iconcode = currentWeather.weather[0].icon;\r\n  return (\r\n    <div className='card'>\r\n      <div className='card-front' ref={frontRef}>\r\n        <div className='card-top'>\r\n          <button onClick={closeCard} className='button-close'>\r\n            X\r\n          </button>\r\n          <input\r\n            ref={cityRef}\r\n            onKeyPress={enterWeather}\r\n            type='text'\r\n            className='search'\r\n            placeholder='Ciudad/City/Ville'\r\n          />\r\n          <button onClick={moreInfo} className='button-info'>\r\n            i\r\n          </button>\r\n        </div>\r\n        <div className='card-body'>\r\n          <h3>{currentWeather.name}</h3>\r\n          <div className='card-current'>\r\n            <span>\r\n              <img\r\n                src={`http://openweathermap.org/img/wn/${iconcode}@2x.png`}\r\n                alt='weather icon'\r\n              />\r\n            </span>\r\n            <div className='card-description'>\r\n              <h3>\r\n                {currentWeather.main.temp} {units === 'metric' ? 'C º' : 'F º'}\r\n              </h3>\r\n              <p>{currentWeather.weather[0].description}</p>\r\n            </div>\r\n          </div>\r\n          <div className='card-more-info'>\r\n            <div>\r\n              <FontAwesomeIcon icon={faArrowUp} />\r\n              <p>\r\n                {currentWeather.main.temp_max}{' '}\r\n                {units === 'metric' ? 'C º' : 'F º'}\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <FontAwesomeIcon icon={faArrowDown} />\r\n              <p>\r\n                {currentWeather.main.temp_min}{' '}\r\n                {units === 'metric' ? 'C º' : 'F º'}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='card-back' ref={backRef}>\r\n        <div className='card-top'>\r\n          <button onClick={moreInfo} className='button-info'>\r\n            i\r\n          </button>\r\n        </div>\r\n        <div className='card-body'>\r\n          <ul>\r\n            {days.map((day, i) => {\r\n              return (\r\n                <li key={i}>\r\n                  <div className='day'>{day}</div>\r\n                  <div className='temps'>\r\n                    <FontAwesomeIcon icon={faArrowUp} />\r\n                    {currentForecast[day].max}{' '}\r\n                    {units === 'metric' ? 'C º' : 'F º'}\r\n                    <FontAwesomeIcon icon={faArrowDown} />\r\n                    {currentForecast[day].min}{' '}\r\n                    {units === 'metric' ? 'C º' : 'F º'}\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deleteCity,\r\n  getCityWeather,\r\n  updateCitiesWeather,\r\n} from '../../context/actions/actions-weather';\r\nimport WeatherCard from '../weatherCard/weatherCard';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './cities.scss';\r\n\r\nexport default function Cities() {\r\n  const dispatch = useDispatch();\r\n  const [error, setError] = useState(false);\r\n  const cities = useSelector((state) => state.weatherReducer.cities);\r\n  const units = useSelector((state) => state.weatherReducer.units);\r\n  const lang = useSelector((state) => state.weatherReducer.lang);\r\n  const errpr = useSelector((state) => state.weatherReducer.lang);\r\n  const currentWeather = useSelector(\r\n    (state) => state.weatherReducer.currentWeather\r\n  );\r\n  const { localWeather } = currentWeather;\r\n  const addCityRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    dispatch(updateCitiesWeather());\r\n  }, [dispatch, units, lang]);\r\n\r\n  const changeCity = (newCity, i) => {\r\n    dispatch(getCityWeather(newCity, i));\r\n  };\r\n\r\n  const addCity = (e) => {\r\n    if (e.key === 'Enter') {\r\n      dispatch(getCityWeather(addCityRef.current.value));\r\n    }\r\n  };\r\n\r\n  const deleteCard = (index) => {\r\n    dispatch(deleteCity(index));\r\n  };\r\n\r\n  if (!localWeather) return null;\r\n  return (\r\n    <div className='cities-body'>\r\n      <div className='cities-weather'>\r\n        {cities.map((city, i) => {\r\n          return (\r\n            <WeatherCard\r\n              key={i}\r\n              index={i}\r\n              weather={city}\r\n              changeCity={changeCity}\r\n              deleteCard={deleteCard}\r\n            />\r\n          );\r\n        })}\r\n        {cities.length <= 4 ? (\r\n          <div className='cities-add'>\r\n            <input\r\n              className='cities-input'\r\n              ref={addCityRef}\r\n              type='text'\r\n              placeholder='Ciudad/City/Ville'\r\n              onKeyPress={addCity}\r\n            />\r\n            <FontAwesomeIcon color='white' size='4x' icon={faPlusCircle} />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\n\n// Components\nimport Header from './components/header/header';\nimport CurrentCity from './components/currentCity/currentCity';\nimport Cities from './components/cities/cities';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <CurrentCity />\n      <Cities />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './context/store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}